using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FuzzyString;
using System.IO;

namespace FuzzyStringConsole
{
    class Program
    {
        static void Main(string[] args)
        { 
            string kevin = "Whopper cheese";
            string kevyn = "THE RED COW JUMPED OVER THE RED COW";            
            List<FuzzyStringComparisonOptions> options = new List<FuzzyStringComparisonOptions>();
            options.Add(FuzzyStringComparisonOptions.UseJaccardDistance);
            //options.Add(FuzzyStringComparisonOptions.UseLevenshteinDistance);
            options.Add(FuzzyStringComparisonOptions.LevenshteinDistanceMatrix);
            //options.Add(FuzzyStringComparisonOptions.UseNormalizedLevenshteinDistance);
            options.Add(FuzzyStringComparisonOptions.UseOverlapCoefficient);
            options.Add(FuzzyStringComparisonOptions.UseLongestCommonSubsequence);
            //options.Add(FuzzyStringComparisonOptions.CaseSensitive);

            //Console.WriteLine(kevin.ApproximatelyEquals(kevyn, FuzzyStringComparisonTolerance.Weak, options.ToArray()));
            //Console.WriteLine(kevin.ApproximatelyEquals(kevyn, FuzzyStringComparisonTolerance.Normal, options.ToArray()));
            //Console.WriteLine(kevin.ApproximatelyEquals(kevyn, FuzzyStringComparisonTolerance.Strong, options.ToArray()));
            loopthoughtest();
            Console.ReadLine();
        }
        static void loopthoughtest()
        {
            string kevin = "Ham Cheese Sandwich";
            double approximateequality=1;
            string aeProduct = "";
            //string kevyn = "THE RED COW JUMPED OVER THE RED COW";
            foreach (string product in File.ReadAllLines(@"D:\bkProduct.txt"))
            {
                List<FuzzyStringComparisonOptions> options = new List<FuzzyStringComparisonOptions>();
                options.Add(FuzzyStringComparisonOptions.UseJaccardDistance);
                //options.Add(FuzzyStringComparisonOptions.UseLevenshteinDistance);
                options.Add(FuzzyStringComparisonOptions.LevenshteinDistanceMatrix);
                //options.Add(FuzzyStringComparisonOptions.UseNormalizedLevenshteinDistance);
                options.Add(FuzzyStringComparisonOptions.UseOverlapCoefficient);
                options.Add(FuzzyStringComparisonOptions.UseLongestCommonSubsequence);
                //options.Add(FuzzyStringComparisonOptions.CaseSensitive);

                //if(kevin.ApproximatelyEquals(product.Split('#')[2], FuzzyStringComparisonTolerance.Strong, options.ToArray()))
                //{
                //    Console.WriteLine(product+":"+ kevin.ApproximatelyEquals(product.Split('#')[2], options.ToArray()));
                //}
                double tempAe = kevin.ApproximatelyEquals(product.Split('#')[2], options.ToArray());
                //Console.Write(tempAe);                
                if (approximateequality>tempAe)
                {
                    approximateequality = tempAe;
                    aeProduct = product;
                }
                else if (Double.IsNaN(tempAe))
                {
                    approximateequality = tempAe;
                    aeProduct = product;
                }
            }
            Console.WriteLine(aeProduct + "-->" + approximateequality);
        }
    }
}
